<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post on xym-ee</title>
    <link>https://xym.work/tags/post/</link>
    <description>Recent content in Post on xym-ee</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Sep 2024 10:00:00 +0800</lastBuildDate>
    <atom:link href="https://xym.work/tags/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[post] 使用 gcc 开发 STM32</title>
      <link>https://xym.work/blog/baremetal.html</link>
      <pubDate>Wed, 04 Sep 2024 10:00:00 +0800</pubDate>
      <guid>https://xym.work/blog/baremetal.html</guid>
      <description>使用 gcc 开发 STM32 有 keil IAR 等 IDE，还要在 ubuntu 环境下使用 gcc 来开发 stm32 看起来似乎吃力不讨好。但是掌握这个技能的真正含义是：&#xA;拿到任意一块使用 arm cortex-m 内核的全新设计的芯片，只有芯片手册甚至还没有 IDE 可以使用的时候，使用 C 语言和一些 arm 汇编，以及交叉编译工具，是可以把这个芯片使用起来的。&#xA;更实际的情况是，一些大的裸机项目比如 u-boot，甚至 linux kernel 都是没有 IDE 用的，开发、调试这些项目的工具正是裸机开发 stm32 的这套工具。从一个简单的芯片开始去学习这一流程、练习相应工具的使用。&#xA;我的环境&#xA;ubuntu 22.04 STM32F103C8T6 64K flash 20K ram st-link v2 13.3.rel1-x86_64-arm-none-eabi 最简单的程序 int main() { return 0; } `` 为了让这个函数能在 CPU 上执行，还需要做到芯片通电后跳转到 main 入口。 ```c __attribute__((naked, noreturn)) void _reset(void) { extern long _sbss, _ebss, _sdata, _edata, _sidata; for (long *dst = &amp;amp;_sbss; dst &amp;lt; &amp;amp;_ebss; dst++) *dst = 0; for (long *dst = &amp;amp;_sdata, *src = &amp;amp;_sidata; dst &amp;lt; &amp;amp;_edata;) *dst++ = *src++; main(); // Call main() for (;;) (void) 0; // Infinite loop in the case if main() returns } 想让这个函数通电就执行，需要准备好 C 语言的运行环境，以及指定这个函数的地址，即程序员和硬件的约定，查看 m3 权威指南</description>
    </item>
    <item>
      <title>[post] 静态网站搭建中有关计算机网络相关的内容</title>
      <link>https://xym.work/blog/hugowebsite.html</link>
      <pubDate>Tue, 20 Aug 2024 13:00:00 +0800</pubDate>
      <guid>https://xym.work/blog/hugowebsite.html</guid>
      <description>0. 介绍 需求 1：我需要有个个人网站 hugo 、github pages 需求 2：我需要在局域网中开发和调试 端口转发，NAT 需求 3：我想要更快的访问速度 云服务器部署网页，nginx 需求 4：我想在外网访问内网的机器开发和调试 内网穿透，frp 需求 5: 我还想要更好的体验 软路由、定时任务。问问 chatgpt 1. hogo 生成静态页面 在 ubuntu 环境下开发，ubuntu 安装于虚拟机中，采用桥接网卡方式上网。IP 10.0.0.22&#xA;使用了 terminal-hugo-theme 主题，按照 README 中的说明，在本地生成静态页面并启动一个本地的网页服务器，&#xA;hugo server --buildDrafts --disableFastRender --gc --ignoreCache --noHTTPCache --forceSyncStatic --verbose -w 指令的参数&#xA;--buildDrafts: 生成静态页面时为草稿的内容 --disableFastRender: 禁用快速渲染(只会重新生成发生变化的部分)，确保在每次更改时全部重新生成 --gc: 垃圾回收，清理未使用的文件 --ignoreCache: 强制忽略缓存并重新构建所有文件，确保生成的时最新的 --noHTTPCache: 禁用 HTTP 缓存，强制浏览器从服务器加载站点，确保从浏览器看的到是最新的 --forceSyncStatic: 强制同步静态文件（例如图片、CSS、JS），即使 Hugo 认为它们没有更改。确保所有静态资源都是最新的 --verbose: 输出更多信息 -w: 是 --watch 的缩写，监视文件系统的更改，并在文件修改时自动重新构建站点 hugo 的本地网页服务器监听 1313 端口，生成后，在 ubuntu 的浏览器中访问 http://127.</description>
    </item>
  </channel>
</rss>
