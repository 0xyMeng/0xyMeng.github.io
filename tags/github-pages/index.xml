<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github Pages on xym-ee</title>
    <link>https://xym.work/tags/github-pages/</link>
    <description>Recent content in Github Pages on xym-ee</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Jul 2021 19:01:48 +0530</lastBuildDate>
    <atom:link href="https://xym.work/tags/github-pages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于Github Pages的个人网站(1)——建站记录</title>
      <link>https://xym.work/blog/jekyll1.html</link>
      <pubDate>Thu, 29 Jul 2021 19:01:48 +0530</pubDate>
      <guid>https://xym.work/blog/jekyll1.html</guid>
      <description>1.搭主页之前 为什么我会想搭一个自己的网站呢？&#xA;首先是经验积累。把做过的东西像集卡游戏一样收集起来也是一件挺好玩的事情。其次内容洁癖，要对自己的内容有绝对的控制权，不允许有广告这种不可控内容出现在自己的页面上。&#xA;基于以上的想法，商业博客基本上就被排除掉了。一开始我用的是GitHub，.md文档可以在GitHub网页上直接展示，有一半博客的功能，而且页面相比CSDN之类的足够干净。&#xA;一个小项目总结 用了两天以后发现，在网页上只能显示文字和图片，就像上面这样。在本地的VS Code上可以通过插件实现latex公式，然而网页打开就是一串代码，当然截图插入也是个方法，最重要的是，图片大小不可控。在使用GitHub的这几天，我发现有许多人都有基于Github Pages的自己的主页，可以实现各种功能，这就正好和我的需求对上了，于是经过几天试验，有了目前这个网站。&#xA;2.整体设计思路 我的主页的内容按照下面这几个部分来设计的：&#xA;简历。突出一个个人特征。这部分是给别人看的，放在首页，如果有幸有人不小心点进了我的主页，那么不看也得看，无形之中推销自己。 传统的技术博客。类似于CSDN的中短文章，项目经历展示，开发经验积累，别人看，自己也看。 长篇幅的笔记。大节小节带数学公式，知识总结沉淀。这部分是给自己看的，顺便给别人看，当然由于内容过于臃肿我觉得进来的人几乎不会看的。 在个人简历中我会把这个网页放在一个突出位置，除了实体纸质简历，引导看我简历的人来到这个网页。进入主页直接就有个人联系方式以及社交账号，主页下拉是一个简单的个人介绍，此外还有一些项目经历和我更完整的工作技能点，详细的知识结构。对于一个陌生人来说，这是我最想让他们看到的东西。这个网站更像是个“大简历”，一个实时更新，全面展示的简历。对我感兴趣的人会点击导航栏里“关于我”查看我更详细的个人经历，对我的项目感兴趣的人会点击“我的项目”去看我的开发经验。对我知识结构感兴趣的人会点击“学习笔记”去看我的知识储备。&#xA;3.方案实现 3.1 GitHub Pages是什么 我的GitHub ID是@1xyMeng{:target=&amp;quot;_blank&amp;quot;}，新建一个名为1xyMeng.github.io{:target=&amp;quot;_blank&amp;quot;}的仓库，在仓库Setting选项卡里的GitHub Pages进行如下设置&#xA;这时候1xyMeng.github.io这个地址已经是一个可以访问的网站了。再新建一个随便什么名字的仓库，和上面一样的设置&#xA;这时候1xyMeng.github.io/learning也是一个可以访问的网站了，而且对比一下这两个地址，很有意思，找到一点感觉了。&#xA;这时候如果在1xyMeng.github.io仓库的README.md里面加一行&#xA;[点击跳转](https://1xyMeng.github.io/learning) 使用浏览器访问1xyMeng.github.io，可以看到多出来的一行内容，点一下果然会跳到learning页面。&#xA;以上就是我的网站的最基本的逻辑。把仓库里的内容变成一个可以访问的网页就是GitHub Pages帮我们办到的事情。&#xA;注1：修改了文件后，需要等几分钟，毕竟GitHub Pages帮我们办事情也是要花时间的，在仓库右侧Environments可以查看当前状态。 注2：markdown语法&#xA;3.2 设计实现 上面实际上设计了两个最简单的网页，并且实现了跳转。其实和你现在正在看的这个差的已经不多了（没开玩笑）。无非是我的这个网页多了一些图片，文字更多，并且有了排版。&#xA;网页的底层设计逻辑是样式+文字，样式实现是代码，文字当然还是文字。幸运的是，样式代码已经由前辈为我们准备了大量的开源的、像函数库一样的模板，我们只需要把文字当作参数传进去就可以了。文字内容被写在markdown文档里，自动变成好看的样式。也是就说，在将来实际运行的网站里，网页跳转仍旧是用上面的简单语句实现的，不需要我们进行其他多余的操作。&#xA;斜体部分暂时不明白没关系，后面还会详细的解释这个思想。&#xA;上图展示了4个Github代码仓库之间的关系，每个代码仓库都对应本地的一个文件夹，因此本地有4个同名文件夹，这里还有个本地与github的同步问题，后面工作流有介绍。&#xA;至于仓库里面的代码，当然是找现成的拿来用，也就是套模板。&#xA;4.套模板 这一步是精髓😂😂😂，用别人开源的东西装饰自己的网站，看起来很厉害的样子。实质上我就是个调包侠罢了。&#xA;模板可以去Jekyll Themes找，源码放到username.github.io仓库里就可以看到效果了。&#xA;_posts文件夹里都会有示例文章，文件名也要注意格式，比如本文的文件名为2021-07-01-website1.md，文档打开最前面就是“样式函数”&#xA;--- layout: post categories: 效率工具 title: 基于Github Pages的个人网站(1)——建站记录 date: 2021-07-29 --- 比如本文指定了使用post样式，分类到效率工具，标题为基于Github Pages的个人网站(1)——建站记录，显示创建日期为2021-07-29，理解为函数与参数的关系没有任何问题。后面的所有正文实际上也可以理解为参数。&#xA;Jekyll将构成一个网站原始文件分为模板和内容两个部分，通过渲染器转化成一个完整的可发布的静态网站。这使得不懂前端的人可以专注于内容创作，用标记语言来写文章（Markdown，Textile，HTML），然后Jekyll就会帮我套入一个布局中，生成的就是自己的主页。/* 官网复制 */&#xA;网站的底层是html+css，这个工具将网页代码做了封装，文章标题内容就像函数参数一样传递到布局上。参考这篇文章的源文件，和你现在看的做一下对比。我在写这篇文章的时候完全没有考虑格式的问题，只是使用了简单的markdown语法，这也是使用这个工具建立个人网站的原因之一，它足够简单。&#xA;其中要关注的其他文件夹：&#xA;_layouts：文章的模板。有点函数的意思，文件名类比函数名，不同的文件是不同的布局样式。&#xA;_includes：包含到布局或文章中可以被重复使用，有点头文件的意思。&#xA;此外，&#xA;_config.yml文件保存全局配置数据，包含许多网页自带功能开关设置。 GitHub pages通过这些文件自动生成一个可以访问的网站，如果编译错误会发个邮件提醒&#xA;编译出错 具体的文件里的代码，本来想写点东西的，但是感觉我也完全不懂HTML，还是不乱输出没用的内容了。总之我的方法就是：多试试。删掉以后看看哪里会出问题，那么这块代码基本上就是管这个功能的😂😂😂。&#xA;5.工作流 这里要说git与Github同步的问题，详细的教程，可以参考这个书：《GitHub入门与实践》。</description>
    </item>
    <item>
      <title>基于Github Pages的个人网站(2)——文字样式</title>
      <link>https://xym.work/blog/jekyll2.html</link>
      <pubDate>Thu, 29 Jul 2021 19:01:48 +0530</pubDate>
      <guid>https://xym.work/blog/jekyll2.html</guid>
      <description>markdown基本文字效果 复制自@果冻虾仁&#xA;该文件用来测试和展示书写README的各种markdown语法。GitHub的markdown语法在标准的markdown语法基础上做了扩充，称之为GitHub Flavored Markdown。简称GFM，GFM在GitHub上有广泛应用，除了README文件外，issues和wiki均支持markdown语法。&#xA;列表目录+超链接：&#xA;横线 标题 文本 普通文本 单行文本 多行文本 文字高亮 换行 斜体 粗体 删除线 图片 来源于网络的图片 GitHub仓库中的图片 链接 文字超链接 链接外部URL 链接本仓库里的URL 锚点 图片链接 列表 无序列表 有序列表 复选框列表 块引用 代码高亮 表格 表情 diff语法 横线 ***、&amp;mdash;、___可以显示横线效果&#xA;*** --- ___ 标题 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 文本 普通文本 这是一段普通的文本&#xA;单行文本 Hello,大家好，我是果冻虾仁。 在一行开头加入1个Tab或者4个空格。&#xA;文本块 语法1 在连续几行的文本开头加入1个Tab或者4个空格。&#xA;欢迎到访 很高兴见到您 祝您，早上好，中午好，下午好，晚安 语法2 使用一对各三个的反引号：&#xA;欢迎到访 我是C++码农 你可以在知乎、CSDN、简书搜索【果冻虾仁】找到我 该语法也可以实现代码高亮，见代码高亮</description>
    </item>
  </channel>
</rss>
